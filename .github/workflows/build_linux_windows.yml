name: build_linux_windows

on:
  push:
    branches:
      - master
  workflow_dispatch:
env:
  build_folder: ./build/gpredict-2.3.54

jobs:
  build_linux:
    runs-on: ubuntu-latest

    steps:
    - name: clone repo
      uses: actions/checkout@v3
    
    - name: create folder ./build
      run:  mkdir ./build   
      #Создаем папку с именем по правилу "<Имя_Программы>_<Версия>"
      #Чтобы в ней собирать .deb-пакет
    
    - name: create folder ./build/gpredict-2.3.54
      run:  mkdir ${{env.build_folder}}
      #копируем исходники
    
    - name: copying files
      run: mv ./* ${{env.build_folder}}
        # если ошибка на этом шаге - всё равно продолжаем
      continue-on-error: true 
    
    - name: sudo apt update
      run: sudo apt update
    
    - name: apt install
      run: |
        sudo apt install libtool intltool autoconf automake libcurl4-openssl-dev
        sudo apt install pkg-config libglib2.0-dev libgtk-3-dev libgoocanvas-2.0-dev
    
    - name: run ./autogen.sh
      run: | 
        cd ${{env.build_folder}}
        ./autogen.sh
    
    - name: make
      run: |
        cd ${{env.build_folder}}
        make
    # устанавливаем пакеты для работы dh_make
    
    - name: sudo apt-get install build-essential dh-make
      run: sudo apt-get install build-essential dh-make
    
    - name: dh_make -s -y --createorig
      run: |
        cd ${{env.build_folder}}
        dh_make -s -y --createorig 
          # "-s" - single пакет; 
          #"-y" - ответ yes на все вопросы; 
          #-"createorig" - создание всех нужных папок и файлов атоматически.

    # Собираем пакет      
    - name: dpkg-buildpackage -rfakeroot -us -uc
      run: |
        cd ${{env.build_folder}}
        dpkg-buildpackage -rfakeroot -us -uc
          # "-rfakeroot" - дает права действовать, как root
          # "-us" - не подписывать пакет исходников
          # "-uc" - не подписывать бинарный пакет

    - name: archiving
      run: |
        # перносим файлы в корень проекта
        cp   ./build/gpredict_2.3.54-1_amd64.deb ./gpredict_2.3.54-1_amd64.deb
        cp   ./.github/installation_on_linux.txt ./installation_on_linux.txt
        # арихвируем их
        zip  for_linux.zip ./gpredict_2.3.54-1_amd64.deb ./installation_on_linux.txt
            
    - name: tree -Ra
      run: tree -Ra
      
    - uses: actions/upload-artifact@v3
      with:
        name: for_Linux
        path: ./for_linux.zip
    
  build_windows:
    runs-on: windows-latest
    defaults:
     run:
       shell: msys2 {0}
    
    steps:
    - name: clone repo
      uses: actions/checkout@v3
    
    - uses: msys2/setup-msys2@v2
      with:
        msystem: mingw32
        update: true #обновляем пакеты 
        install: zip mingw-w64-i686-gcc mingw-w64-i686-pkg-config mingw-w64-i686-gtk3 mingw-w64-i686-goocanvas mingw-w64-x86_64-toolchain autotools git #установим пакеты       
    
    - name: Patching files
      # "-N" -- не откатывать файлы к старым версиям (если файлы уже пропатчены)
      # "-p0" - ни одна часть из пути не будет пропущена. Файл будет применен с точностью до его полного пути
      run: |
        echo patching win32/gpredict.rc 
        patch -p0 < ./.github/patch_win32_gpredict.rc -N
        echo patching win32/Makefile
        patch -p0 < ./.github/patch_win32_Makefile -N
      continue-on-error: true 
    
    - name: make dist
      run: |
        cd win32
        make dist
    
    - name: dir
      run: dir win32

    - name: archiving
      run: |
        # перносим файлы в корень проекта
        cp   ./win32/gpredict-...zip ./gpredict-...zip
        cp   ./.github/installation_on_windows.txt  ./installation_on_windows.txt
        # добавляем в существующий архив файл инструкции
        zip -u ./gpredict-...zip ./installation_on_windows.txt
        # Переименовываем архив
        
    
    - uses: actions/upload-artifact@v3
      with:
        name: for_windows
        path: gpredict-...zip
          
  Create_release: # Создаем релиз и добавляем в него файлы артефактов
    runs-on: ubuntu-latest
    needs: [build_linux, build_windows]
    
    steps:
      # загрузим артефакты, полученные в предыдущих джобах
    - name: Download artifact windows
      id: download_artifact_windows
      uses: actions/download-artifact@v3
      with:
            name: for_windows
            path: ./gpredict-...zip 
            
    - name: Download artifact linux
      id: download_artifact_linux
      uses: actions/download-artifact@v3
      with:
            name: for_Linux
            path: ./for_linux.zip

    - name: Path
      run: |
            echo "tree -Ra"
            tree -Ra
            
            
      # Создаем релиз, куда вдальнейшем добавим загруженные выше артефакты
    - name: create release
      id: create_release
      uses: actions/create-release@v1
      env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
            tag_name: v2.2.1
            release_name: Release v2.2.1
      
      # Добавляем в релиз файлы артефактов
    - name: Upload Release Asset
      id: upload_release_asset_windows 
      uses: actions/upload-release-asset@v1
      env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
           upload_url: ${{ steps.create_release.outputs.upload_url }} 
           asset_path: for_windows.zip
           asset_name: for_windows.zip
           asset_content_type: application/zip

    - name: Upload Release Asset
      id: upload_release_asset_linux
      uses: actions/upload-release-asset@v1
      env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
           upload_url: ${{ steps.create_release.outputs.upload_url }} 
           asset_path: for_linux.zip
           asset_name: for_linux.zip
           asset_content_type: application/zip
